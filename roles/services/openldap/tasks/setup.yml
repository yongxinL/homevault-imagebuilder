# =============================================================================
#
# - Copyright (C) 2016     George Li <yongxinl@outlook.com>
#
# - This is part of HomeVault imagebuilder project.
# - This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# =============================================================================

---
- name: encrypt password hash for {{ install_role_name }} root user
  command: >
    slappasswd -s {{ target_root_password }}
  register: openldap_password_hash

- name: update target and copy {{ install_role_name }} configuration
  template:
    src: "{{ item.name }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode|default('0644') }}"
  with_items: "{{ openldap_configuration }}"

- name: update target and create {{ install_role_name }} database directory
  file:
    path: "{{ target_appdata_root }}/{{ install_role_name }}"
    state: directory

- name: update target and reconfigure {{ install_role_name }} and database
  command: "{{ item }} chdir=/etc/ldap/"
  with_items:
    - /tmp/debconf-set-selections.sh
    - rm -rf /etc/ldap/slapd.d/cn=config
    - /usr/sbin/dpkg-reconfigure --frontend noninteractive slapd
    - /usr/sbin/slapadd -l /tmp/initial.ldif
  when: ansible_os_family == "Debian"

- name: update target and create {{ install_role_name }} database dump
  command: "{{ item }} chdir={{ target_appdata_root }}"
  with_items:
    - tar -czf /etc/ldap/{{ install_role_name }}_init.tar.gz {{ install_role_name }}

- name: update target and remove unused script from temporary folder
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "/tmp/debconf-set-selections.sh"
    - "/tmp/initial.ldif"
    - "{{ target_appdata_root }}/{{ install_role_name }}"

- name: update target and remove {{ install_role_name }} services from booting
  command: update-rc.d -f {{ item }} remove
  with_items:
    - slapd
    - libnss-ldap
    - nscd
  when: ansible_os_family == "Debian"

- name: update target and enable {{ install_role_name }} authentication (common-auth)
  lineinfile:
    dest: "/etc/pam.d/common-auth"
    regexp: "{{ item.regxp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - { regxp: '^(.*)success=2 default=ignore(.*)$', line: 'auth    [success=2 default=ignore]      pam_unix.so nullok_secure try_first_pass' }

- name: update target and enable {{ install_role_name }} authentication (common-password)
  lineinfile:
    dest: "/etc/pam.d/common-password"
    regexp: "{{ item.regxp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - { regxp: '^(.*)success=1 user_unknown=ignore default=die(.*)$', line: 'password        [success=1 user_unknown=ignore default=die]     pam_ldap.so try_first_pass' }

- name: update target and enable {{ install_role_name }} authentication (common-session)
  lineinfile:
    dest: "/etc/pam.d/common-session"
    regexp: "{{ item.regxp }}"
    line: "{{ item.line }}"
    state: present
    create: yes
  with_items:
    - { regxp: '^(.*)pam_mkhomedir.so(.*)$', line: 'session required                        pam_mkhomedir.so umask=0022 skel=/etc/skel' }

- name: update target and create ldap.secret
  lineinfile:
    dest: "/etc/rc.local"
    line: ". /lib/lsb/init-functions"
    insertafter: "# By default this script does nothing."
    owner: root
    group: root
    mode: 0755
    state: present
    create: yes

- name: update target and add init-functions into rc.local
  lineinfile:
    dest: "/etc/rc.local"
    line: ". /lib/lsb/init-functions"
    insertafter: "# By default this script does nothing."
    owner: root
    group: root
    mode: 0755
    state: present
    create: yes

- name: update target and starting {{ install_role_name }} from rc.local
  blockinfile:
    dest: "/etc/rc.local"
    insertbefore: "exit 0"
    marker: "# {mark} MANAGED {{ install_role_name }} BLOCK"
    state: present
    block: |
      if [ ! -f "/etc/setup_{{ install_role_name }}.done" ]; then
        log_begin_msg "Initializing {{ install_role_name }} environment"
        #MARK_{{ install_role_name }}_DATA
        tar -xvf /etc/ldap/{{ install_role_name }}_init.tar.gz -C {{ target_appdata_root }} > /dev/null
        touch "/etc/setup_{{ install_role_name }}.done"
        log_end_msg 0
      fi

      if [ $(ps -ef | grep -c slapd) != 1 ]; then
        service slapd restart
      else
        service slapd start
      fi

      if [ ! -f "/etc/setup_{{ install_role_name }}.done" ]; then
        log_begin_msg "Updating nsswitch.conf and enable {{ install_role_name }} authentication"
        sed -i 's/^passwd.*/passwd:         files ldap/' /etc/nsswitch.conf
        sed -i 's/^group.*/group:          files ldap/' /etc/nsswitch.conf
        sed -i 's/^shadow.*/shadow:         files ldap/' /etc/nsswitch.conf
        sed -i 's/^netgroup.*/netgroup:       nis/' /etc/nsswitch.conf
        touch "/etc/setup_{{ install_role_name }}.done"
        log_end_msg 0
      fi

      if [ $(ps -ef | grep -c nscd) != 1 ]; then
        service nscd restart
      else
        service nscd start
      fi

- name: update target and start {{ install_role_name }} from rc.local
  lineinfile:
    dest: "/etc/rc.local"
    line: "{{ item }}"
    insertafter: "#MARK_{{ install_role_name }}_DATA"
    state: present
  with_items:
    - '  [ ! -d "{{ target_appdata_root }}/{{ install_role_name }}" ] && { mkdir -p "{{ target_appdata_root }}/{{ install_role_name }}" && chmod -R 644 "{{ target_appdata_root }}/{{ install_role_name }}"; }'
  when: target_appdata_root is defined and target_appdata_root
